#+Title: Cadena de caracteres STRINGs

* Clase String
Construcción:
#+BEGIN_SRC java
String texto1 = “¡Prueba de texto!”;
String texto2 =”Este es un texto que ocupa “ +
	“varias líneas, no obstante se puede “+
	“perfectamente encadenar”;

// Construcciones especiales
char[] palabra = {‘P’,’a’,’l’,’b’,’r’,’a’};//Array de char
String cadena = new String(palabra);

byte[] datos = {97,98,99};
String codificada = new String (datos, “8859_1”);
/* En el último ejemplo la cadena codificada se crea desde un array de tipo byte que
contiene números que serán interpretados como códigos Unicode. Al asignar, el valor
8859_1 indica la tabla de códigos a utilizar. */
#+END_SRC

** Métodos NO estáticos

| Método.                     | Descripción                                                |
|-----------------------------+------------------------------------------------------------|
| cat1.length()               | Devuelve la longitud de la cadena.                         |
| cat1.charAt(3)              | Devuelve el carácter de la posición 4                      |
| cad1.concat(cat2)           | Concatena 2 cadenas.                                       |
| cad1.substring(3,6)         | Devuelve 6 caracteres desde el 4º.                         |
| cad1.compareTo(cad2)        | Permite comparar dos cadenas entre sí                      |
|                             | lexicográficamente. Retornará 0 si son iguales,            |
|                             | un número menor que cero si la cadena (cad1) es            |
|                             | anterior en orden alfabético a la que se pasa              |
|                             | por argumento (cad2), y un número mayor que cero           |
|                             | si la cadena es posterior en orden alfabético.             |
| cad1.equals(cad2)           | Cuando se comparan si dos cadenas son iguales, no          |
|                             | se debe usar el operador de comparación "==", sino         |
|                             | el método equals. Retornará true si son iguales, y         |
|                             | false si no lo son.                                        |
| cad1.trim()                 | Genera una copia de la cadena eliminando los espacios      |
|                             | en blanco anteriores y posteriores de la cadena.           |
| cad1.toLowerCase()          | Genera una copia con los caracteres a minúscula.           |
| cad1.toUpperCase()          | Genera una copia con los caracteres a mayúsculas.          |
| cad1.indexOf(cad2)          | Si la cadena o carácter pasado por argumento está          |
|                             | contenida en la cadena invocante, retorna su posición,     |
|                             | en caso contrario retornará -1.                            |
| cad1.indexOf(cad2,num)      | Opcionalmente se le puede indicar la posición a partir     |
|                             | de la cual buscar, es útil para buscar varias apariciones. |
| cad1.contains(cad2)         | Retornará true si la cadena pasada por argumento está      |
|                             | contenida dentro de la cadena. En caso contrario           |
|                             | retornará false.                                           |
| cad1.startsWith(cad2)       | Retornará true si la cadena comienza por la cadena pasada  |
|                             | como argumento. En caso contrario retornará false.         |
| cad1.endsWith(cad2)         | Retornará true si la cadena acaba por la cadena pasada     |
|                             | como argumento. En caso contrario retornará false.         |
| cad1.replace(cad2,cad3)     | Devuelve un string copia de la cadena cad1, en la que se   |
|                             | reemplazarán todas las apariciones de cad2 por cad3.       |
|                             | El reemplazo se hará de izquierda a derecha, por           |
|                             | ejemplo: reemplazar "zzz" por "xx" en la cadena "zzzzz"    |
|                             | generará "xxzz" y no "zzxx".                               |
| cad1.replaceAll(regex, cad) | Reemplaza según la expresión regular                       |

| Método.                        | Descripción                                           |
|--------------------------------+-------------------------------------------------------|
| cad1.compareToIgnoreCase(cad2) | El método compareToIgnoreCase funciona igual que      |
|                                | el método compareTo, pero ignora las mayúsculas y     |
|                                | las minúsculas a la hora de hacer la comparación.     |
|                                | Las mayúsculas van antes en orden alfabético que      |
|                                | las minúsculas, por lo que hay que tenerlo en cuenta. |
| cad1.equalsIgnoreCase(cad2)    | El método equalsIgnoresCase es igual que el método    |
|                                | equals pero sin tener en cuenta las minúsculas.       |



** Ejercicios
Crea una clase que nos trabaje cadenas:
+ Invierte un texto introducido por teclado (clase LeerEntrada)
+ Elimina los espacios en blanco:
	+ De antes del texto
	+ De después del texto
	+ De dentro del texto (dobles espacios)

* Clase Stringbuilder
En Java, String es un objeto _inmutable_, lo cual significa, entre otras cosas, que cada vez que creamos un String, o un literal de String, se crea un nuevo objeto que no es modificable. Java proporciona la clase StringBuilder, la cual es un mutable, y permite una mayor optimización de la memoria. También existe la clase StringBuffer, pero consume mayores recursos al estar pensada para aplicaciones multi-hilo, por lo que en nuestro caso nos centraremos en la primera.

| Método                  | Descripsión                                                         |
|-------------------------+---------------------------------------------------------------------|
| strb.delete(6,8)        | Elimina los caracteres desde el 7º al 9º carácter.                  |
| strb.append(".")        | Añade '.' al final.                                                 |
| strb.insert (0,"¡")     | Insertamos en la posición 0, el símbolo de apertura de exclamación. |
| strb.replace (3,5,"la") | Reemplazamos los caracteres 'al' situados entre la posición         |
|                         | inicial 3 y la posición final 4, por la cadena 'la'. En este método |
|                         | ocurre igual que en los métodos delete y substring, en vez de       |
|                         | indicar como posición final la posición 4, se debe indicar justo la |
|                         | posición contigua, es decir 5.                                      |
|                         |                                                                     |

StringBuilder contiene muchos métodos de la clase String (charAt, indexOf, lenght, substring, replace, etc.), pero no todos. Habrá que estar atentos a la *documentación* y los errores.

+ Referencia [[https://docs.oracle.com/javase/tutorial/java/data/buffers.html][Doc *OFICIAL*]]

** Ejercicios
*** Busca dos métodos de ~String~ que no estén en ~Stringbuilder~.
*** Invierte el texto
*** Elimina los espacios en blanco de:
	+ Antes
	+ Después
	+ Dentro (dobles espacios)

* Práctica
Realiza un programa que dados los archivos ~carta.txt~ y ~destinatarios.csv~ implemente el controlador Main que:
#+BEGIN_QUOTE
0 - Declaración de variables  \\
1 - Cargamos el archivo CSV y lo parseamos dentro de una instancia de la clase Parametros \\
2 - Cargamos la carta a memoria \\
3 - Cargamos los datos CSV \\
4 - Cargamos los datos a parsear según usuario \\
5 - Ahora realizamos las sustituciones \\
6 - Escribimos las cartas y mostramos el resultado
#+END_QUOTE

Para la implementación disponemos de la clase ~TrabajarArchivo~ cuya ~interface~ podéis verla en ~Github~ y la implementación de la clase ~Parametros~, también en ~Github~.

Tienes disponible en ~Github~ la interfaz de ~TrabajarArchivo~, la implementación de ~Parametro~, la carta y el archivo CSV con los datos a procesar.

/Nota: el carácter ~$~ se debe sustituir por su varlor literal ~\u0024~ y debe ir escapado ~\\~ /
