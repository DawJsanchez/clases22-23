#+Title: DML II - EDICIÓN DE DATOS


** Introducción
En este tema trataremos de crear, modificar y eliminar registros.

Recordad que el objetivo es tener un CRUD completo, esto es:
 - Create (~insert~ y/o ~replace~)
 - Read (~select~)
 - ~Update~
 - ~Delete~

Con un CRUD completo podremos gestionar cualquier conjunto de datos que requiera la empresa o servicio.

En este tema os tendréis que auto-documentar con las herramientas, referencias y enlaces que el profesor os ha ido facilitando a lo largo del curso.

** Utilidades
Como ya adelantamos, será de gran utilidad la creación de tablas temporales.

~CREATE TEMPORARY TABLE~ crea una tabla válida sólo para el usuario que la creó y en la sesión actual.

** Ejercicio:
1. Investiga como realizar un ~create~ de forma que:
   + Añade 1 empresa. Deberás tener en cuenta las restricciones impuestas (F.K.).
   + Añade 1 trabajadores a las tablas del tema 3. Deberás tener en cuenta las restricciones impuestas (F.K.).
   + Añade 2 contratos a dicho trabajador, uno de ellos sin fecha de finalización.
   + Añade o reemplaza si ya existe el trabajador con DNI ~87654321Z~.
   + Modifica el contrato sin fecha de finalización con fecha de 31 de julio de 2023.
   + Introduce un nuevo contrato y elimínalo.


** TRANSACTION - COMMIT y ROLLBACK

   Las transaciones es la técnica por lo que podemos realizar un conjunto de operaciones de forma atómica.

Para implementarla deberemos rodear las operaciones que deseemos "ATOMIZAR" entre un ~{ START TRANSACTION | BEGIN | BEGIN WORK }~ y un ~{ COMMIT | ROLLBACK }~.

Si todo sale correcto se consolidan las operaciones con un ~COMMIT~, y si algo no va bien (p.e. no tenemos saldo suficiente para comprar) se desacen todas las consultas con ~ROLLBACK~.

/Nota: ~START TRANSACTION~, ~BEGIN~ y ~BEGIN WORK~ son sinónimos que podremos utilizar indistintamente/.

   Deberemos haber indicado al sistema que vamos a utilizar transaciones mediante el ~SET autocommit = 0;~ o ~SET autocommit = OFF;~, ya que de otra forma MySQL toma por defecto el valor ~autocommit = 1~, y estar utilizando tablas que lo soporten, por ejemplo ~InnoDB~.

Para averiguar que tipo de tablas estamos utilizando, podemos utilizar: ~SHOW TABLE status from 00_db_Luis like 'P3_T%'\G;~, para tablas concretas, y  ~SELECT @@default_storage_engine;~, de forma global.

*** Ejercicio:
Vamos a probar el funcionamiento de las transacciones. Para vamos a utilizar la bd del tema 1 (concesionario de vehículos).
Los pasos serán:
1. Estableceremos la configuración que habilita las transacciones.
2. Indicaremos que comenzamos una transacción.
3. Consultaremos la tabla de contratos. Debe haber, y mostrar, 1 contrato.
4. Eliminaremos dicho contrato.
5. Consultaremos la tabla de contratos. Debe haber, y mostrar, 0 contratos.
6. Anularemos la transacción.
7. Consultaremos la tabla de contratos. Debe haber, y mostrar, 1 contrato. \\
/Nota:/ Si llegados a este punto no te muestra 1 contrato debes avisar al profesor.

También queremos el caso contrario, esto es, que completemos la transacción. Para ello:
1. Estableceremos la configuración que habilita las transacciones.
2. Indicaremos que comenzamos una transacción.
3. Consultaremos los clientes.
4. Daremos de alta un nuevo cliente de nombre 'Barry' y apellido 'Allen'
5. Consultaremos la tabla de clientes. Debe mostrarlo.
7. Confirmaremos la transacción.
8. Consultaremos la tabla clientes de nuevo. \\
/Nota:/ Si llegados a este punto no te muestra a 'Barry' debes avisar al profesor.

Y, también:
1. Estableceremos la configuración que habilita las transacciones.
2. Indicaremos que comenzamos una transacción.
3. Consultaremos la tabla de clientes y debe mostrar a 'Barry'
4. Modificaremos el nombre a 'Flash'
5. Consultaremos la tabla clientes y ahora deberá aparecer 'Flash Allen'.
6. Anularemos la transacción.
7. Consultaremos la tabla clientes y debe mostrar de nuevo a 'Barry Allen'. \\
/Nota:/ Si llegados a este punto no te muestra a 'Barry' debes avisar al profesor.

** Práctica:
Este tema no tiene práctica obligatoria, por lo que la evaluación será sólo vía exámen.
** Usuarios y privilegios

#+BEGIN_SRC sql
# Crear usuarios
		mysql> CREATE USER [IF NOT EXISTS]  username@hostname IDENTIFIED BY 'password';
		# hostname tipicamente ~localhost~ para conexiones locales
# Ver usuarios
		mysql> SELECT USER FROM mysql.user;

#  ¿Porqué tenemos dos root?

# Asignar privilegios a usuarios
		mysql> GRANT all privileges ON bobdb.* TO bob@localhost;

# Consultar privilegios
		mysql> SHOW GRANTS FOR super@localhost;
#+END_SRC

Los privilegios posibles son ~SELECT~, ~INSERT~, ~UPDATE~ y ~DELETE~. Podemos asignarlos todos con ~ALL PRIVILEGES~.\\
Los privilegios pueden aplicarse de forma muy granular, esto es, pueden aplicarse en:
+ todas las bbdd: ~*.*~
+ una bbdd: ~dbTienda.*~
+ una tabla: ~dbTienda.clientes~
+ por columnas:
  #+Begin_SRC sql
	GRANT
	SELECT (employeeNumner,lastName, firstName,email),
	UPDATE(lastName)
	ON employees
	TO bob@localhost;
  #+END_SRC
+ sobre rutinas: ~GRANT EXECUTE ON PROCEDURE nominas TO bob@localhost;~
+ copiar privilegios: ~GRANT PROXY ON root TO alumno@localhost;~

**** Referencias:
+ [[https://www.mysqltutorial.org/mysql-grant.aspx][Permisos]]

*** Ejercicios
Para realizar estos ejercicios vamos a montar un entorno de desarrollo basdo en ~Docker~.\\

Aunque ~Docker~ sobre ~Windows~ nunca es una buena idea a la larga, para el propósico específico que vamos a tratar en el que *NO NECESITAMOS* controlar los puertos de capa 4 ~TCP/IP~ podremos emplear ~Docker Desktop~ sobre ~Windows~.
**** Contenedor MYSQL
Una vez instalado ~Docker Desktop~ sólo deberemos ejecutar los siguientes 3 comandos en la terminal.
#+BEGIN_SRC bash
# 1. Crear red
			docker network create redMySQL
#1b. Verificar red
			docker network list
# 2. Crear contenedor mariadb
			docker run -d --name mariadb -e TZ='Europe/Madrid' -e MARIADB_RANDOM_ROOT_PASSWORD=true -v datos:/var/lib/mysql -p 3306:3306 --net redMySQL mariadb:latest
# 2b. Verificar funcionamiento
		  docker ps
# 3. [Opcional] Crear PHPMyAdmin
		  docker run -d --name phpmyadmin -e PMA_HOST=mariadb --net redMySQL -P phpmyadmin
# 3b. Verificar donde está
		  docker ps

# 99. Eliminar todo
		docker rm mariadb phpmyadmin
		docker network rm redMySQL
#+END_SRC
**** Crear usuarios
1. Crea el usuario ~DrJimenez~ y asignarle permisos de:
   + lectura a la tabla ~datos_de_paciente~ de la bbdd ~hospital~.
   + escritura a la tabla ~historial_clinico~ de la misma bbdd.
2. Crea el rol ~sanitario~ y repite los permisos anteriores.
3. Crea los usarios ~DraJimenez~ y ~DraGonzalez~ y asígnales el rol ~sanitario~.
4. Crea el rol  ~adminstrativo~ y asignarle permiso de:
   + creación, escritura y borrado a la tabla ~datos_de_paciente~ de la bbdd.
5. Creal los usuarios ~adm_pedro~ y ~adm_manuela~ y asígnales el rol ~administrativo~.
6. Crea el rol ~informatica~ y asignale permiso global a toda la bbdd.
7. Crea el usuario ~inf_antonio~ y asígnale el rol ~informatica~.
8. Elimina los privilegios de borrado de la tabla ~datos_de _paciente~ al rol ~administrativo~.


/Nota:/ Evidentemente debéis investigar la forma de crear roles y eliminación de permisos. *Ésto cae en el EXÁMEN*.

** Exámen:
Este tema tendrá exámen el próximo viernes 27 de enero.
