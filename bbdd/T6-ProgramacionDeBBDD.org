#+Title: Programación de BBDD

* INTRODUCCIÓN
   Los gestores de BBDD con el tiempo han ido incorporando características propias de un lenguaje de programación y permiten la integración, el control de flujo y el desarrollo de subrutinas. \\
   Son dependientes del servidor en el que trabajemos, así en ~SQL-Server~ (de MS) se denomina ~Transact-SQL~ o ~T-SQL~, en ~Oracle PL/SQL~, y ~MySQL/MariaDB~ tienen el suyo propio siguiendo el estándar ISO ~SQL/PSM~. Todos implementan soluciones similares, pero el código *NO* es /portable/ directamente.

Lo anterior se traduce en que en ~MariaDB~, además de tablas, podemos almacenar los siguientes objetos:
+ Vistas (ver temas 4 y 5)
+ Rutinas:
  * Funciones
  * Procedimientos
+ Triggers y eventos
+ [[https://mariadb.com/kb/en/user-defined-functions/][User-defined functions (funciones externas)]]

* Funciones:
  Una ~FUNCTION~ es una función definida por el usuario e invocada en sentencias SQL como cualquier otra función regula (p.e. ~ABS()~) y retorna un *único* valor.
[[https://mariadb.com/kb/en/stored-function-overview/][Doc OFICIAL]]
** CREAR (y borrar):
    #+BEGIN_SRC sql
	  DROP FUNCTION IF EXISTS tuNombreDeFuncion;

	  DELIMITER //
	  CREATE FUNCTION tuNombreDeFuncion (Parametero1 tipo, Par2 tipo, ..., Par_N tipo)
			 #-- todos los Par son tipo IN
			 RETURNS tipo [DETERMINISTIC]	# INT, CHAR, ...
			 BEGIN
				#-- Declarar aquí variables internas a utilizar;
				DECLARE var1, var2 INT;


				#-- maneja excepciones y estados
				DECLARE { CONTINUE | EXIT | UNDO } HANDLER FOR condition_value statement;


				#-- AQUÍ las sentencias sql a ejecutar
				RETURN variable;	# del tipo determinado en la línea ~RETURNS~
			 END //
	  DELIMITER ;

	#-- Simplificadamente
	  USE bbdd;
	  DROP FUNCTION IF EXISTS sumaEnteros;

	  DELIMITER $$
	  CREATE FUNCTION sumaEnteros(operador1 INT, operador2 INT)
			 RETURNS INT DETERMINISTIC
			 BEGIN
				DECLARE resultado INT;

				SET resultado := operador1 + operador2;
				RETURN resultado;
			 END $$
	  DELIMITER ;
    #+END_SRC

	  Una función es determinista si siempre* que toma los mismos valores devuelve el mismo resultado. A efectos prácticos, si no interactuáis con tablas, ni elementos aleatorios (/RAND/ ), podréis decir que la función lo es (DETERMINIST).

	  El manejo de excepciones no es necesario, pero si no las manejáis y obtenéis un error/excepción no controlada la ejecución se detiene, y con ello la corrección de la práctica o exámen.

	  Referencia: [[https://mariadb.com/kb/en/create-function/][Doc OFICIAL]]

*** Asignación de variables:
	#+BEGIN_SRC sql
	  SET @nombre_de_variable = expr [, @var2 = expr2...]
	  SELECT col1 [, col2...] INTO @var1 [, @var2...] FROM... # asigna columnas a variables
	#+END_SRC

		Referencia: [[https://mariadb.com/kb/en/selectinto/][Doc OFICIAL]]

** Llamar o invocar:
    #+BEGIN_SRC sql
		  SELECT tuNombreDeFuncion( par1 );
    #+END_SRC

** Mostar:
    #+BEGIN_SRC sql
		  SHOW CREATE FUNCTION tuNombreDeFuncion;
    #+END_SRC

** Eliminar:
    #+BEGIN_SRC sql
		  DROP FUNCTION nombre;
    #+END_SRC

* Procedimientos:
** CREAR (y borrar):
    #+BEGIN_SRC sql
	  DROP PROCEDURE IF EXISTS nombreDelProcedimiento;

	  DELIMITER //
	  CREATE PROCEDURE nombreDelProcedimiento(IN par1 INT, INOUT par2 VARCHAR(50), ..., OUT parN INT)
	  BEGIN
		 DECLARE { CONTINUE | EXIT | UNDO } HANDLER FOR condition_value statement;
		 # maneja excepciones y estados

		 # AQUÍ las sentencias sql a ejecutar
	  END //
	  DELIMITER ;
    #+END_SRC

Referencias [[https://mariadb.com/kb/en/create-procedure/][Doc OFICIAL]]

** Llamar o invorcar:
    #+BEGIN_SRC sql
		  CALL nombreDelProcedimiento( Par1, Par2, ... ParN );
    #+END_SRC
** Mostrar:
    #+BEGIN_SRC sql
		  SHOW CREATE PROCEDURE tuNombreDeProcedimiento;
    #+END_SRC
** Eliminar:
    #+BEGIN_SRC sql
		  DROP PROCEDURE nombre;
    #+END_SRC

** Excepciones y manejo de ERRORES
	#+BEGIN_SRC sql
	#-- En primer lugar renombramos excepciones:
	   DECLARE la_has_liado_parda CONDITION FOR 1217;
	   #-- Intenta borrar datos en tabla padre con restricciones e hijos presentes.

	#-- Depués controlamos las excepciones:
	   DECLARE EXIT HANDLER FOR la_has_liado_parda
	   BEGIN
		  ROLLBACK;
		  SELECT 'La has ido liando ... ¡manazas!';
	   END

	#-- También directamente:
	   DECLARE EXIT HANDLER FOR 1217
	   BEGIN
		  ROLLBACK;
		  SELECT 'La has ido liando ... ¡manazas!';
	   END


	#-- Ejemplo
	DECLARE EXIT HANDLER FOR SQLEXCEPTION BEGIN
		SELECT 'Excepción capturada' AS 'Errores';
    END;
	#+END_SRC

	 Referencias:
	 + https://joshuaotwell.com/19911-2/
	 + https://programmerclick.com/article/2985442352/
	 + https://www.mysqltutorial.org/mysql-error-handling-in-stored-procedures/
	 + https://stackoverflow.com/questions/7712110/declare-continue-handler-for-not-found-is-not-working
     + https://mariadb.com/kb/en/mariadb-error-codes/
     + https://mariadb.com/kb/en/perror/

* Variables
** Declaración de variables
		En ~MariaDB~ tenemos más variables de las que a priori podría parecer debido al ámbito ~scope~ de las mismas. \\
		Como en todos los lenguajes de programación, la variables tienen un ámbito de visivilidad por lo que vamos a hacer un repaso:
		+ Globales: van precedidas de la palabra ~GLOBAL~ y tienen ámbito en toda rutina y consulta y por todo usuario y sesión. Sólo los /administradores/ pueden actualizar su valor.
		+ Variables de sessión: van precedidas de la ~@~ y son las que cualquiequier usuario puede crear, pero sólo son visibles en la sesión actual de ese usuario.
		+ Variables de rutina:
		  * Declaradas implícitamente en la entrada/salida de la rutina: el diseñador de la rutina las nombra como argumentos de entrada/salida.
		  * Declaradas explícitamente: son declaradas todas JUNTAS al comienzo de la rutina, justo después del BEGIN y antes de cualquier otra sentencia. *NO* llevan la ~@~ NUNCA y sólo son de uso interno de la rutina.

Referencia: [[https://mariadb.com/kb/en/declare-variable/][Doc OFICIAL]]

/Recuerda:/ @var != var

** Variables complejas /ROW/ (version > 10.3):
Estas variables permiten funcionar como variables vectoriales, esto es, podemos definir la variable dimension en el que tengamos las propiedades X, Y y Z.

Las variables ~ROW~ permiten ser el destino de un ~CURSOR~,  así como la salida de múltiples columnas de una consulta.

Referencias: [[https://mariadb.com/kb/en/row/][Doc OFICIAL]]

* Condicionales:
Son instrucciones de control de flujo o de toma de decisión. Según el condición determinada elegirá un camido de ejecución u otro.

   #+BEGIN_SRC sql
# Operador Case
	 CASE valor
		WHEN comparación THEN resultado
		[WHEN comp2 THEN res2]
		...
		[ELSE res] END;


# Condicional IF
		IF condicion THEN sentencias si verdadero
		[ELSEIF condicion2 THEN sentencias de esta otra condición ]
		...
		[ ELSE sentencias en cualquier otro caso ]
		END IF;
   #+END_SRC

Recuerda no confundir el control de flujo con el condicional IF con las funiones IF vistas en tema 4:
  #+BEGIN_SRC sql
	# Funciones IF
	 IF(expr1, expr2, expr3); # IF expr1 DEVUELVE expr2 ELSE expr3
	 IFNULL(expr1, expr2);    # IF expr1 no es Null DEVUELVE expr2
	 NULLIF(expr1, expr2);    # IF expr1 = expr2 DEVUELVE NULL ELSE DEVUELVE expr1
   #+END_SRC

* Bucles:
+ For: https://mariadb.com/kb/en/for/
+ While: https://mariadb.com/kb/en/while/
+ Repeat: https://mariadb.com/kb/en/repeat-loop/
+ /Break/ : https://mariadb.com/kb/en/leave/

#+BEGIN_QUOTE
    **No recomendables** (por ser programación no estructurada)
+ https://mariadb.com/kb/en/iterate/
+ https://mariadb.com/kb/en/loop/
#+END_QUOTE

** Uso de ~CURSOR~ y ~FETCH~
Referencias:
+ [[https://mariadb.com/kb/en/cursor-overview/][Doc OFICIAL]]
+ [[https://dev.mysql.com/doc/refman/8.0/en/cursors.html][CAP 19.2.11, pág 1032, manual de referencia MySQL 5.0]]


* Triggers (disparadores):
	Un disparador es un objeto de una base de datos que se asocia con una tabla, y se activa cuando ocurre un evento en particular para esa tabla.
**** Crear:
	#+BEGIN_SRC sql
	  CREATE TRIGGER nombre_disparador
			 {BEFORE | AFTER} {INSERT | UPDATE | DELETE} ON nombre_tabla
	            # momento y evento en tabla
			 FOR EACH ROW sentencia_disp
	#+END_SRC
	#+BEGIN_QUOTE
	  Sentencia puede ser una sola o un grupo de sentencias entre ~BEGIN~ y ~END~
	#+END_QUOTE
**** Mostrar:
	 #+BEGIN_SRC sql
	   SHOW TRIGGERS [LIKE 'patron' | WHERE 'condicion'];
	 #+END_SRC
**** Referencias:
   + https://phoenixnap.com/kb/mysql-trigger


* RUTINAS

* Consultas de interés:
#+BEGIN_SRC sql
	  SHOW DATABASES;		# muestra todas la bases de datos de nuestro servidor SQL.
	  USE nombre_db; 		# utiliza la bbdd ~nombre_db~
	  SHOW TABLES;		  	# muestra todas las tablas de la bbdd
	  DESC nombre_tabla;	# muestra la descripción de la tabla
	  SHOW COLUMNS FROM nombre_tabla;
							# igual que ~DESC nombre_tabla;~
	  SHOW CREATE TABLE nombre_tabla;
							# muestra el ~CREATE TABLE nombre_tabla...~ correspondiente

	  SELECT * FROM information_schema.referential_constraints WHERE constraint_schema = 'database';
							# muestra las claves foráneas y sus restricciones

	  SELECT user, host FROM mysql.user;
			# muestra los usuarios del servidor y la máquina desde la que pueden conectar
			#     ->  Si host es ~%~ equivale a cualquiera
			#     ->  Si host es ~localhost~ sólo podrá loguearse desde la máquina donde se ejecuta el servidor SQL
			#     ->  Si host es una ip o algo como ~10.12.%~ sólo podrá conectarse desde la ip o ips que coincidan con el patrón.
			# ~mysql.user~ -> El prefijo ~mysql~ nos permite acceder a la bbdd aunque no esté en ~uso~. Si la tenemos seleccionada sería innecesario añadirle el prefijo (~...FROM user~).

		SHOW PROCEDURE STATUS WHERE db = 'classicmodels';
		SHOW FUNCTION STATUS WHERE db = 'classicmodels';
			# muestra los procedimientos y funciones de la BBDD

		SET GLOBAL general_log=OFF;
		SET GLOBAL log_output = 'TABLE';
		SET GLOBAL general_log=ON;
		  # los de un alumno concreto
		SELECT event_time, user_host, command_type, CONVERT(argument USING utf8)
		  FROM mysql.general_log
		  WHERE user_host LIKE '%Alfonso%'
		  ORDER BY event_time DESC ;

		  # logs completos
		SELECT event_time, user_host, command_type, CONVERT(argument USING utf8)
		  FROM mysql.general_log
		  ORDER BY event_time DESC ;


		SET GLOBAL log_bin_trust_function_creators = 1;
			# habilita la subida de FUNCIONES sin privilegios
#+END_SRC


* Resumen del RUTINAS
  :PROPERTIES:
  :CUSTOM_ID: programacion-de-bbdd
  :END:

*** Creacion de la bbdd
	:PROPERTIES:
	:CUSTOM_ID: creacion-de-la-bbdd
	:END:

 1. En primer lugar deberéis crear la bbdd y asigarsela a algún usuario. \\
	 /Nota:/ Ya lo he hecho por vosotros porque no disponeis de los permisos.\\
   /Nota 2:/ Para el Proyecto Final Ciclo deberéis realizarlo.
 2. Cargar tablas: \\
	=mysql -hdb.luiscastelar.duckdns.org -P45682 -uLuis00 -p$(cat ~/Documentos/secretos/oracle_mysql_Luis00.pass) < nominas21_01_tablas_iniciales.sql 2>&1 | tee nominas21_01_tablas_iniciales.sql.log= \\
	/Nota:/ Debes sustituir el usuario y el password por los tuyos.

*** Carga de funciones
	:PROPERTIES:
	:CUSTOM_ID: carga-de-funciones
	:END:

 1. =mysql -hdb.luiscastelar.duckdns.org -P45682 -uLuis00 -p$(cat ~/Documentos/secretos/oracle_mysql_Luis00.pass) < nominas21_02_fun_descuentosNomina.sql 2>&1 | tee nominas21_02_fun_descuentosNomina.sql.log=

 2. Ver funciones almacenadas =SHOW FUNCTION STATUS;=

 3. Ver la definición de la función
	=SHOW CREATE FUNCTION descuentosNomina;"=

*** Uso de funciones
	:PROPERTIES:
	:CUSTOM_ID: uso-de-funciones
	:END:

 Prueba/uso de funcionamiento =SELECT descuentosNomina(4.7, 1000);=,
 siendo el primer parámetro el porcentaje de deducción del salario bruto
 que es el segundo parámetro de la función.

*** Carga de procedimientos
	:PROPERTIES:
	:CUSTOM_ID: carga-de-procedimientos
	:END:

 1. La carga es igual que la de las funciones.
 2. Ver procedimientos almacenados =SHOW PROCEDURE STATUS;=
 3. Ver la definición =SHOW CREATE PROCEDURE ...=;

* TODO PRÁCTICA
Se desea informatizar el servicio de nóminas de una empresa. Para ello deberemos analizar una nómina extrayendo las distintas entidades y relaciones.

Concretamente partiremos de:
#+ATTR_ORG: :width 400
[[./T3-DisenhoFisico/P3-Nominas.drawio.png]]

... \\

** Adecuación de una bbdd
Llegamos a una empresa donde ya tienen una bbdd (la de la práctica 3), pero la misma no se adecúa a nuestras necesidades, por lo que vamos a proceder a relizar las siguientes modificaciones:
+ EMPRESA (CIF, nombre, dir, cp, prov, ccc, tlfID) => ~empresas (*empresa_id*, /cif/, nombre, dir, cp, prov, /ccc/)~, siendo *id* la clave primaria y, /cif/ y /ccc/ claves candidatas.
+ TRABAJADOR (NIF, nombre, ape1, ape2, tlfID, nss, catID, cotID) => ~trabajadores(*trabajador_id*, /nif/, nombre, ape1, ape2, /nss/, _cat_id_, _cot_id_)~, donde _categoria_id_ y _grupo_de_cotizacion_id_ son claves foráneas a las tablas ~categorias~ y ~grupos_de_cotizacion~ respectivamente.
+ TLF (ID, pre, tlf) => no utilizada => eliminar.
+ CAT (ID, nombreCat) => ~categorias (*categoria_id*, nombre_categoria)~
+ COT (ID, grupo) => ~cotizaciones (*cotizacion_id*, grupo_de_cotizacion)~
+ TCONTRATO (codContrato, nombre) => ~tipos_de_contrato (*tipo_de_contrato_id*, nombre)~
+ CONTRATO (numContrato, fAlta, fBaja, codContrato, NIF, CIF) ) => ~contratos (*contrato_id*, fecha_alta, fecha_baja, /tipo_de_contrato_id/, /trabajador_id/, /empresa_id/)~
+ CONCTIPO (conTipo, nombre, tipo) => ~tipos_de_conceptos (*tipo_de_concepto_id*, nombre, tipo)~
+ CONCSALARIO (ID, numContrato, conTipo, cantidad) => ~conceptos_de_salario (*concepto_id*, /contrato_id/, /tipo_de_concepto_id/, cantidad)~
+ PERCEPCION <= CONCSALARIO => no utilizada
+ BASESCOT (ID, numContrato, cantidad) => ~bases_de_cotizacion (*base_cot_id*, /contrato_id/, cantidad)~
+ BASESTIPOS (ID, nombre, porcentaje) => ~tipos_aplicables (*tipo_base_id*, nombre, porcentaje)~
+ TIPODEDUC (tipoDeduccion, nombre, receptor) => ~tipos_deducciones (*tipo_deduccion_id*, nombre, recpetor)~\\
		Donde el recpetor es:
  + Hacienda para el IRPF, DEDHEXTRA y DEDHEXTRAFM
  + SES para DEDCC
  + SEPE para DEDDES
  + SEXPE para DEDFP
+ DEDUCCION (ID, tipoDeduccion, anho, mes, NIF, numContrato, cantidad) => ~deducciones (*deduccion_id*, /tipo_deduccion_id/, anho, mes, /trabajador_id/,/contrato_id/, cantidad)~

#+ATTR_ORG: :width 800
[[./t6-programacion/bbdd_nominas_fase1.png]]


*APLICACIÓN DE NÓMINAS*
Se deberá desarrollar un procedimiento que hará las veces de controlador y se encargará de llamar al resto de procedimientos y funciones para la generación de las nóminas.

Este procedimiento se llamará =generar_nominas= y recibirá el mes y año en formato =INT=  de 1 o 2 dígitos, por lo que se entendrá que todas las nóminas son como poco de año 2000.
** Fase I:
*** 1 Datos del trabajador

 Se deberá desarrollar un procedimiento que una vez llamado mostrará los datos como en el ejemplo de la nómina proporcionado (T3).

 Deberá llamarse =datos_del_trabajador= y recibirá el =trabajador_id=  del trabajador

*** 2 Datos de la empresa

 Se deberá desarrollar un procedimiento que una vez llamado mostrará los datos como en el ejemplo de la nómina proporcionado (T3).

 Deberá llamarse =datos_de_la_empresa= y recibirá el =empresa_id=  de la misma.

*** 3 Días trabajados

 Se deberán desarrollar una función que facilitado un =mes=, =anho= y =contrato_id=, y nos determine que el número de días totales trabajados *(\*)*. Esta función deberá llamarse =dias_trabajados= .

 *(\*)* /Como ya sabéis, en España se considera que todos los meses trabajados completamente (desde el primer día al último) contablemente tienen 30 días, siendo ésta una aproximación razonable, y el número de días trabajados en cualquier otro caso./

 Para seguir dándole forma a la nómina, deberemos crear un procedimiento que imprima

 #+begin_src
     Periodo de liquidación DD/MM/AAAA - DD/MM/AAAA     Nº de días D

 #+end_src

 Este procedimiento deberá denominarse =periodo_de_liquidacion= .

** Fase II:
 #+begin_src
     Hasta aquí lo hacemos funcionar a mano. De que funcione, continuamos.

 #+end_src

*** 3b Días trabajados II

 Llegados a este punto, te habrás dado cuenta que algo falla. Nosotros hasta ahora trabajábamos con =trabajador_id=(personas) y ahora se nos requiere un =contrato_id=(contrato), por lo que debemos crear un procedimiento que relaciones ambos conceptos en el espacio temporal proporcionado. Este procedimiento, denominado =trabajadores_con_contrato_en_vigor= recibirá el =trabajador_id=, el =mes=y el =anho=, y deberá localizar *TODOS*  los trabajadores que tengan, al menos, un contrato en vigor en ese periodo, y llamar a todos los procedimientos de creación de nómina (1), (2), (3),...(7) para cada uno de los contratos en vigor.

 /Recuerda que un trabajador podrá tener más de un contrato en vigor en un mes/

* ~MariaDB~ modo ~ORACLE~
[[https://mariadb.com/kb/en/sql_modeoracle/][Doc OFICIAL]] sobre el conversión de sistaxis de la habitual ~SQL/PSM~ de ~MySQL~ o ~MariaDB~  al formato similar a  ~PL/SQL~ de ~ORACLE~. *NO* es un compatibilidad total, sólo un acercamiento.
