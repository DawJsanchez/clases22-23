* T3 Diseño físico
Duración: 21 horas.\\
Temporización: 20/10 - 15/11

** Lenguaje de consultas estructuradas -SQL-
   :PROPERTIES:
   :CUSTOM_ID: lenguaje-de-consultas-estructuradas--sql-
   :END:

Es un lenguaje estandar estructurado diseñado para administrar y
recuperar información de SGBD. La versión más actual es la ANSI
SQL:2016.

Desgraciadamente, cada fabricante ha desarrollado su propio dialecto
para que el usuarrio pueda extender sus funcinalidades con
procedimientos y funciones.\\
Nosotros utilizaremos MariaDB en su rama 10.X. La misma fue compatible
plenamente con MySQL hasta la versión 5.5 en la que ambos desarrollos
separaron caminos.

Se divide en 3 partes:
+ DDL (lenguaje de definición de datos): Incluye sentencias para gestionar las estructuras, esto es, la creación y modificación de tablas.
+ DML (lenguaje de manipulación de datos): Incluye sentencias para gestionar los datos.\\
 DML por tanto se encargará de realizar los CRUD:
   - C de Create: insertará nuevos registros.
   - R de Read: consultará los datos de las tablas.
   - U de Update: actualizará total o parcialmente los registros.
   - D de Delete: eliminará los registros.
+ DCL (lenjuage de control de datos): Incluye sentencias para gestionar la seguridad y los permisos.\\
Creción de usuarios, roles y asignación granular de permisos de lectura/escritura a vistas, tablas o bases de datos.
+ [EXTRA] TCL (lenguaje de control de transacciones): ~commit~ y ~rollback~
** Cómo documentarnos sobre SQL
   :PROPERTIES:
   :CUSTOM_ID: cómo-documentarnos-sobre-sql
   :END:

Pues el mejor sitio para documentarnos es sin duda la
[[https://mariadb.com/kb/en/sql-statements-structure/][documentación
OFICIAL]].

Lo que ocurre es que si deseamos saber como crear una tabla, de nuestro
modelo RELACIONAL ya normalizado en 3FN, nos encontraremos cosas como
ésta:

#+BEGIN_EXAMPLE
  CREATE [OR REPLACE] [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name
      (create_definition,...) [table_options    ]... [partition_options]
  CREATE [OR REPLACE] [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name
      [(create_definition,...)] [table_options   ]... [partition_options]
      select_statement
  CREATE [OR REPLACE] [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name
     { LIKE old_table_name | (LIKE old_table_name) }

  select_statement:
      [IGNORE | REPLACE] [AS] SELECT ...   (Some legal select statement)
#+END_EXAMPLE

E indagando vemos que nos añade que /create_definition/ será:

#+BEGIN_EXAMPLE
  create_definition:
    { col_name column_definition | index_definition | period_definition | CHECK (expr) }

  column_definition:
    data_type
      [NOT NULL | NULL] [DEFAULT default_value | (expression)]
      [ON UPDATE [NOW | CURRENT_TIMESTAMP] [(precision)]]
      [AUTO_INCREMENT] [ZEROFILL] [UNIQUE [KEY] | [PRIMARY] KEY]
      [INVISIBLE] [{WITH|WITHOUT} SYSTEM VERSIONING]
      [COMMENT 'string'] [REF_SYSTEM_ID = value]
      [reference_definition]
    | data_type [GENERATED ALWAYS]
    AS { { ROW {START|END} } | { (expression) [VIRTUAL | PERSISTENT | STORED] } }
        [UNIQUE [KEY]] [COMMENT 'string']

  constraint_definition:
     CONSTRAINT [constraint_name] CHECK (expression)
#+END_EXAMPLE

Deberemos saber por tanto que tenemos las siguientes reglas: | Símbolo |
Descripción |

| Mayúsculas | Palabra reservada                       |
| Minúsculas | sustituir                               |
| [ ]        | opcional                                |
| \vert      | ~pipe~ opciones alternativas            |
| { }        | opciones alternativas, pero obligatoria |
| ...        | número variable de datos (separados por comas) |

Una vez conocidas estas reglas podemos pasar a crear nuestras primeras
tablas.

P.e., la creación de la tabla correspondiente a la entidad ~CICLISTA~
del ejercicio del examen del tema anterior se concretaría:

#+BEGIN_EXAMPLE
  /* -----------------------------------------------------------------------------
   * Esta sentencia crea la tabla *ciclista*.
   * Campos:
   *  - numFederado (entero, no nulo, autoincremental)
   *  - nombre (cadena de máx 20 caracteres)
   *  - idNacionalidad (entero) /Más adelante lo enlazaremos (FK) con su tabla
   *  - fechaNacimiento (fecha) / Formato similar a string del tipo 'AAAA-MM-DD'
   *  - Convertimos numFederado a PK
   *----------------------------------------------------------------------------*/
  CREATE TABLE ciclista (numFederado INT NOT NULL AUTO_INCREMENT,
              nombre VARCHAR(20),
              nacionalidad VARCHAR(20),
              fechaNacimiento DATE,
              PRIMARY KEY(numFederado)
              );
#+END_EXAMPLE

Como podemos ver, podemos añadir comentarios en/entre sentencias SQL con
el formato tipo ~C~ o ~Java~ ~\/*~ y ~*\/~.\\
También podremos hacerlo mediante un comentario de una sola línea
predediendolo de =#= o con el desaconsejado =--= (lleva 2 giones y un
espacio).

En =MariaDB= y =MySQL= tenemos además los comentarios ejecutables
=/*! codigo a ejcutar */=. Aunque no son objeto de este curso, los
veremos en las exportaciones/importaciones de database -en adelante db-
y tablas.\\
/Si el alumno desea ampliar, puede hacerlo en la documentación oficial/.

** DDL - Creación/Uso/Eliminación de bases de datos:
   :PROPERTIES:
   :CUSTOM_ID: ldd---creaciónusoeliminación-de-bases-de-datos
   :END:

El conjunto de todas las tablas y otras características avanzadas
(triggers, vistas, rutinas, comentarios de tablas y eventos) se denomina
=DATABASE= (base de datos).\\
Un sistema gestor de db como =MariaDB= puede albergar múltiples db, cada
una con todo el contenido indicado en el párrafo anterior + el conjunto
de permisos de acceso/escritura que veremos en la sección de LCD.

Para crear una db: =CREATE DATABASE nombreBaseDeDatos=

Para eliminarla: =DROP DATABASE nombreBaseDeDatos;=

Para usarla: =USE nombreBaseDeDatos=

** DDL - Creación de tablas:
   :PROPERTIES:
   :CUSTOM_ID: ldd---creación-de-tablas
   :END:

Ver ejemplo en apartado de documentación sobre creación de una tabla.

Si ya tenemos una tabla con el nombre =ciclista= al ejecutar la
sentencia arrojaría error, por lo que podemos asegurarla añadiendo la
partícula IF NO EXISTS, esto es,
=CREATE TABLE IF NO EXISTS nombreTabla...=

*** Palabras reservadas en SQL
    :PROPERTIES:
    :CUSTOM_ID: palabras-reservadas-en-sql
    :END:

[[https://dev.mysql.com/doc/refman/8.0/en/keywords.html][Ver doc oficial]]

Al contrario que en otros lenguajes, en SQL podremos utilizar las
palabras reservadas siempre que indiquemos que son una cita (quote),
esto es, añadir la palabra entre dos " ` ". P.e.: ~SELECT `fulltex` FROM tabla~

*** Tipos de datos
    :PROPERTIES:
    :CUSTOM_ID: tipos-de-datos
    :END:

- Textos: CHAR(n), VARCHAR(n), TEXT(n), BLOB(n), LONGTEXT, LONGBLOB,
  ENUN(val1, val2,...), ...
- Números: BOOL, INT(n), FLOAT(p)
- Fecha:
  - DATE: 'AAAA-MM-DD' (Ojo: el rango es de '1000-01-01' a '9999-12-31')
  - DATETIME: 'AAAA-MM-DD hh:mm:ss' (Ojo: mismo rango)
  - /TIMESTAMP/: El tiempo en UNIX -EPOCH- se mide como la cantidad de
    segundos transcurridos desde las 0h00m00s del 1 de enero de 1970 UTC
    (tiempo universal coordinado), y es un real con signo, por lo que
    pude medir instantes anteriores indicando los segundos hasta dicho
    momento. La parte decimal indica fracciones de segundo, esto es, el
    TIMESTAMP 60.1 corresponde a las 0 horas 01 minutos 00 segundos y
    una décima, del 1 de enero de 1970 UTC.
  - TIME: 'hh:mm:ss' (Ojo: que mide desde 839 horas a -839 horas).
  - YEAR: 'AAAA' (Ojo: Entre 1901 y 2155 y 0000).
  - [[https://mariadb.com/kb/en/data-types/][Más tipos]]

*** Literales
    :PROPERTIES:
    :CUSTOM_ID: literales
    :END:

Similar a =Java=, encerrando los valores de texto entre comillas
simples, p.e. =SELECT * FROM tabla WHERE nombre = 'Pepe'=

Como en =Java= deberemos escapar ciertos caracteres:
| Esc seq | Character    |   | Esc seq | Character | | Esc seq | Character |
|----+-------------------+---+---+---------------------+---+---+--------|
| \0 | ASCII NUL (0x00). |   | '  | Single quote ("'"). |   | " | Double quote (“"”). |
| \b | Backspace.        |   | \n | Newline, or linefeed |  | \r | Carriage return. |
| \t | Tab.              |   | \Z | ASCII 26 (Control+Z) | | \\ | Backslash ("”). |
| %  | “%" character     |   |  _ | A “_” character.     | |    |                 |

*** Resticciones a columnas:
Para la creación de una tabla tendremos columnas de distinto tipo, siendo su formato ~{nombre} {tipo} [opciones]~
Donde:
+ nombre: es el nombre del atributo (columna)
+ tipo: es el formato de datos (int, date, ...)
+ opciones:
	+ Permitir o no ~NULL~ o asignar valores por defecto.
						~[NOT NULL | NULL] [DEFAULT ValorPorDefecto]~
	+ Crear un autoincremental.
						~[AUTO_INCREMENT]~
	+ Permite elegir un índice (único) o una Primary Key
						~[UNIQUE [KEY] | [PRIMARY] KEY]~
	+ Crea una FK que apunta a un campo ~NombreColumna~ de otra tabla (~NombreTabla~)
						~FOREIGN KEY (NomColDeEstaTabla) REFERENCES NombreTabla (NombreColumna)~
	+ En el caso de tener referencias (FK), podemos asignar resticciones, esto es, que hacer cuando se borre o actualice una entrada que está referenciada.
								~[ON DELETE opcion ] [ON UPDATE opcion] ]~
		+ Opciones:
								~[ON DELETE RESTRICT | CASCADE | SET NULL | NO ACTION] | SET DEFAULT~
								~[ON UPDATE RESTRICT | CASCADE | SET NULL | NO ACTION] | SET DEFAULT~

Para crear PK compuestas lo definiremos al final del ~CREATE TABLE~ con el formato ~PRIMARY KEY(columna1, columna2, ...)~.

Así mismo, podremos crear índices para acelerar búsquedas. Para ello, al igual que la PK, después de la definición de las columnas añadiremos ~KEY [nombreDelÍndice] (columna1, columna2, ...)~.\\
/~KEY~ e ~INDEX~ son sinónimos./

*** Ejercicio:
    :PROPERTIES:
    :CUSTOM_ID: ejercicio
    :END:

Crea el resto de tablas del ejercicio propuesto de examen Modelo ER y
RELACIONAL.

*** Consulta la estructura de una tabla
    :PROPERTIES:
    :CUSTOM_ID: consulta-la-estructura-de-una-tabla
    :END:

Podemos consultar la estructura de una tabla con =DESCRIBE nombreTabla=,
lo cual nos mostrará algo como:

#+BEGIN_EXAMPLE
  | Field       | Type    | Null | Key | Default | Extra          |
  +-------------+---------+------+-----+---------+----------------+
  | id          | int(11) | NO   | PRI | NULL    | auto_increment |
  | idVendedor  | int(11) | NO   | PRI | NULL    |                |
  | idComprador | int(11) | NO   | PRI | NULL    |                |
  | idVehiculo  | int(11) | NO   | PRI | NULL    |                |
  +-------------+---------+------+-----+---------+----------------+
#+END_EXAMPLE

Aunque también podemos consultar la sentencia que nos premitiría
reconstruir la tabla de nuevo con =SHOW CREATE TABLE nombreTabla=

** DDL - Modificación de tablas:
   :PROPERTIES:
   :CUSTOM_ID: ldd---modificación-de-tablas
   :END:

=ALTER TABLE= será la sentencia a utilizar para modificar una tabla que
ya existe.

Ejemplos:

#+BEGIN_EXAMPLE
  # Añadir el campo apellido:
  ALTER TABLE ciclista
      ADD apellidos VARCHAR(20);

  # Eliminar el campo equipo:
  ALTER TABLE ciclista
      DROP COLUMN equipo;

  # Modificar la nacionalidad para normalizar la tabla
  ALTER TABLE ciclista
      MODIFY COLUMN nacionalidad INT;

  # Añadir la nacionalidad como FK (primero eliminamos la columna actual)
  # Después deberemos añadir una columna con la FK y que haga referencia a la tabla(atributo)
  ALTER TABLE ciclista DROP COLUMN nacionalidad;
  ALTER TABLE ciclista
      ADD FOREIGN KEY (idNacionalidad) REFERENCES nacionalidad(id);

  # Eliminar un FK
  ALTER TABLE ciclista
      DROP FOREIGN KEY idNacionalidad;

  # Renombrar tabla
  ALTER TABLE contratos RENAME p1_contratos;
#+END_EXAMPLE

Algo más exahustivo...
#+BEGIN_QUOTE
ALTER TABLE NombreTabla
|  ADD [COLUMN] DefiniciónColumna [FIRST \vert AFTER NombreColumna] |
|  ADD INDEX [NombreIndice]  [TipoIndice] (NombreColumnasIndice,..) |
|  ADD [CONSTRAINT [Simbolo] ] PRIMARY KEY [TipoIndice] (NombreColumnasIndice,..) |
|  ADD [CONSTRAINT [Simbolo] ] UNIQUE [NombreIndice] [TipoIndice] (NombreColumnasIndice,..) |
|  ADD [FULLTEXT \vert SPATIAL]  [NombreIndice] (NombreColumnasIndice,..) |
|  ADD [CONSTRAINT [Simbolo] ] FOREIGN KEY [NombreIndice] (NombreColumnasIndice,..)   REFERENCES NombreTabla(NombreColumnasIndice,…) |
|  DROP [COLUMN] NombreColumna |
|  DROP PRIMARY KEY |
|  DROP INDEX NombreIndice |
|  DROP FOREIGN KEY Simbolo |
|  ALTER [COLUMN] NombreColumna {SET DEFAULT texto \vert DROP DEFAULT} |
|  CHANGE [COLUMN] NombreColumna NuevaDefinicionColumna [FIRST \vert AFTER NombreColumna] |
|  MODIFY [COLUMN] NuevaDefinicionColumna [FIRST \vert AFTER NombreColumna] |
|  RENAME NuevoNombreTabla |
#+END_QUOTE

*** Ejercicio
    :PROPERTIES:
    :CUSTOM_ID: ejercicio-1
    :END:

Crea las modificaciones necesarias para crear las FK vinculantes.

** DDL - Eliminación de tablas (Drop)
    :PROPERTIES:
    :CUSTOM_ID: ldd---eliminación-de-tablas-drop
    :END:

Para eliminar usaremos la sentencia =DROP TABLE nombreTabla;=.\\
Ésta sentencia no puede desacerse por lo que se recomienda asegurarse
del nombre antes de ejecutarla y tener copias de seguridad.

Podemos asegurar la senctencia con la partícula IF EXISTS, esto es,
=DROP TABLE IF EXISTS nombreTabla;=

** OTRAS SENTENCIAS
Como ya hemos visto, existen algunas sentencias que no entran exactamente en el grupo de LDD pero que debemos conocer para manejarnos dentro del Sistema Gestor de Bases de Datos -en adelante SGBD-.
*** Ejercicio: Rellena la tabla
| SENTENCIA                 | DESCRIPCIÓN |
| SHOW DATABASES            |             |
| SHOW TABLES               |             |
| DESCRIBE tabla            |             |
| SHOW COLUMNS              |             |
| SHOW FIELDS               |             |
| SHOW CREATE DATABASE      |             |
| SHOW CREATE TABLE tabla   |             |
| SHOW CREATE TABLE tabla\G |             |
| SHOW CREATE VIEW vista    |             |
| SHOW INDEX FROM tabla     |             |
| SHOW GLOBAL VARIABLES     |             |
| SHOW SESSION VARIABLES    |             |


** [off-topic] MySQL SHELL
   :PROPERTIES:
   :CUSTOM_ID: off-topic-mysql-shell
   :END:

Para el acceso al servidor de bases de datos:
1. Descargar e instalar [[https://dev.mysql.com/downloads/shell/][mysql-shell]]
   + Requiere paquete adicional [[https://learn.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist?view=msvc-160][Visual C++ redistributing]]
2. Acceso al servidor: =\connect USUARIO@dbcli.luiscastelar.duckdns.org:45682=
3. Pasar al modo SQL =\sql=
4. Probar =show databases;=
5. MySQLDump:
   + Pasamos al modo JS =\js=
   + Ejecutamos =util.dumpSchemas(["00_db_Luis"], "~/NOMBRE_DEL_DUMP.dump")=
6. Carga de archivos: =\source ~/ARCHIVO.sql=\\
	/Nota: puedes sustituir =\source= por un dot =.=./

*** Bibliografía
+ [[https://dev.mysql.com/doc/dev/mysqlsh-api-javascript/8.0/group__util.html][API OFICIAL]]
+ [[https://dev.mysql.com/doc/mysql-shell/8.0/en/mysql-shell-commands.html][Documentación OFICIAL]]

*** Restauración de DUMPs
    :PROPERTIES:
    :CUSTOM_ID: restauración-de-dumps
    :END:

Para restaurar un volcado:
=util.loadDump('mysql/sales', {  'waitDumpTimeout': 1800})  // espera datos 1800 segundos=

** [off-topic] COPIAS DE SEGURIDAD
   :PROPERTIES:
   :CUSTOM_ID: off-topic-copias-de-seguridad
   :END:

Como venimos hablando desde el comienzo del curso, las copias de
seguridad son *FUNDAMENTALES* en nuestro trabajo (en realidad en todos
los trabajos) por lo que vamos a proceder a aprender los métodos básicos
para realizarlas.

*** Copias LÓGICAS
    :PROPERTIES:
    :CUSTOM_ID: copias-lógicas
    :END:

#+BEGIN_EXAMPLE
  mysqldump performs a logical backup. It is the most flexible way to perform a backup and restore, and a good choice when the data size is relatively small.

  For large datasets, the backup file can be large, and the restore time lengthy.

  mysqldump dumps the data into SQL format (it can also dump into other formats, such as CSV or XML) which can then easily be imported into another database. The data can be imported into other versions of MariaDB, MySQL, or even another DBMS entirely, assuming there are no version or DBMS-specific statements in the dump.

  mysqldump dumps triggers along with tables, as these are part of the table definition. However, stored procedures, views, and events are not, and need extra parameters to be recreated explicitly (for example, --routines and --events). Procedures and functions are however also part of the system tables (for example mysql.proc).
#+END_EXAMPLE

- [[https://mariadb.com/kb/en/mariadb-dumpmysqldump/][Doc OFICIAL]]
- Uso:

  - Todas la db, pero sólo las db:
    =mysqldump -h host_IP -u usuario -p$(cat ruta_a_credencial/credencial.pass) -Ppuerto -A > ruta_de_bakups/=date
    +"%Y%m%d%H%M%S"=-todas-las-db.sql=
  - Con rutinas: =-R= o =--routines=
  - Sólo las tablas especificadasa:
    =mysqldump ... my_database my_table1 my_table2 my_table3 > my_backup.sql=
  - Comprimido Gzip: =mysqldump ... my_app | gzip -8 > my_backup.sql.gz=
  - Con =trigger= (disparadores): =mysqldum ... --triggers ...=
  - Eventos: =mysqldump ... --events ...=

- [[https://mysqldump.guru/backup-one-multiple-or-all-database-at-once-using-mysqldump.html][Guru MariadbDump]]

**** Restauración de copias
     :PROPERTIES:
     :CUSTOM_ID: restauración-de-copias
     :END:

=mysql [-h host_IP] -u [username] -p [DATABASE name] < [backup filename].sql=

*** Copias FÍSICAS
    :PROPERTIES:
    :CUSTOM_ID: copias-físicas
    :END:

Son más rápidas de realizar y restaurar. No son tan universales, pero
dan opciones extra como encriptar las copias.\\

Son más aptas para db grandes y permiten realizar los backup sin bloqueo
de tablas, por lo que pueden ser realizadas en /caliente/ =hot plug=.
+ [[https://mariadb.com/kb/en/mariabackup-overview/][Doc OFICIAL]]

** MOTORES
Los SGBD permiten utilizar distintos motores de almacenamiento según nuestras necesidades. Los más utilizados son:
    + BerkeleyDB o BDB: tablas de transacción segura con bloqueo de página.
    + HEAP o MEMORY: tablas almacenadas en memoria.
    + *InnoDB*: tablas de transacción segura con bloqueo de fila y claves foráneas.
    + MERGE o MRG_MyISAM: una colección de tablas MyISAM usadas como una única tabla.
    + *MyISAM*: el nuevo motor binario de almacenamiento portable que reemplaza a ISAM.

*Motor de almacenamiento MyISAM:*
Este motor trata tablas no transaccionales. Son tablas de acceso secuencial indexado, los índices indican la posición relativa en el fichero de datos; por tanto son tablas portables de un equipo a otro. Se consideran óptimas cuando las tablas se usan preferentemente para consultas ya que proporcionan almacenamiento y recuperación de datos rápida, sin embargo para realizar inserciones necesitan más recursos. Se soporta en todas las configuraciones MySQL, y es el motor de almacenamiento por defecto.

*Motor de almacenamiento InnoDB:*
Este motor de almacenamiento proporciona tablas *transaccionales*. InnoDB también se incluye por defecto en todas las distribuciones binarias de MySQL. En otras se puede activar o desactivar. \\
Se utiliza en grandes bases de datos que necesitan alto rendimiento puesto que además de la capacidad de recuperación de fallos, InnoDB gestiona múltiples usuarios simultáneamente. Como característica destacada, soporta también restricciones de clave ajena (FOREIGN KEY). \\
Las tablas InnoDB pueden ser de cualquier tamaño.

*Transacciones*: Es la capacidad de una BBDD de realizar operaciones de forma NUCLEAR de forma que en caso de interrupción se vuelve a un estado seguro. \\
El procedimiento es encerrar el conjunto de sentencias entre un ~BEGIN~ y un ~COMMIT~ para confirmar o un ~ROLL BACK~ para desechar los cambios.
** COMMENT PRÁCTICA:
Se desea informatizar el servicio de nóminas de una empresa. Para ello deberemos analizar una nómina extrayendo las distintas entidades y relaciones.

Concretamente partiremos de...
* Bibliografía
   :PROPERTIES:
   :CUSTOM_ID: bibliografía-1
   :END:

*Documentación:*
+ [[https://mariadb.com/kb/en/sql-statements-structure/][documentación OFICIAL]]
+ [[https://dev.mysql.com/doc/refman/8.0/en/][doc MySQL]]
+ [[https://luiscastelar.duckdns.org/BBDD/refman-5.0-es.pdf][doc OBSOLETA en ES]]

*Tutoriales:*
+ [[https://www.w3schools.com/mysql/default.asp][W3School.com]]

*Video-tutoriales*
+
