# coding: utf-8
# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "Ecodev/ubuntu-server-2204"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"
  config.vm.network :public_network,:bridge=>"wlp3s0"
  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  
  #--------------------------------------------------------------------------
  #     SSH Key
  #--------------------------------------------------------------------------
  # Copia nuestra llave pública en el interior del contenedor para autorizarnos
  # el acceso.
  # No es necesario, pero ahorra mogollón de tiempo.
  #id_rsa_pub = File.read("#{Dir.home}/.ssh/id_rsa.pub")
  id_rsa_pub = File.read("#{Dir.home}/.ssh/id_ecdsa.pub")
  config.vm.provision "copy ssh public key", type: "shell",
    inline: "echo \"#{id_rsa_pub}\" >> /home/vagrant/.ssh/authorized_keys"
  
  #--------------------------------------------------------------------------
  #     SHELL
  #--------------------------------------------------------------------------
  config.vm.provision "shell", inline: <<-SHELL
## Todo se ejecuta como SUDO,
# salvo que le indiquemos otra cosa con `sudo -u user`
#
# Funcion que instala si es necesario
function _inst {
    while [ "$*" ]; do
        if ! which $1 > /dev/null; then
            apt-get update
            apt-get -y install "$@" ;
            break;
        fi ;
        shift ;
    done
}

_inst git curl tree
if ! which docker > /dev/null; then
   curl https://get.docker.com/ > get_docker.sh && chmod +x get_docker.sh && ./get_docker.sh
fi
_inst docker-compose
echo "-------------------------------------"
# ip a
ip a show eth1
echo "-------------------------------------"
docker -v
docker-compose -v
echo "-------------------------------------"
rm -rf /home/vagrant/docker
mkdir -p /home/vagrant/docker
cp -r /vagrant/* /home/vagrant/docker/
cd /home/vagrant/docker
docker-compose down
docker-compose up -d
docker-compose ps
sleep 3
docker-compose logs | tail
echo "-------------------------------------"
# Para mostrar la parte pública... si se necesita
tree /vagrant/www/
echo "-------------------------------------"
SHELL

end
